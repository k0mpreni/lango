package courses

import (
	"lango/cmd/web/view/layout"
	"lango/internal/database/domain"
	"time"
)

type layoutOpts struct {
	backBtn   bool
	createBtn bool
}

templ CourseLayout(title string, opts layoutOpts) {
	@layout.Base(true, title) {
		<section class="container mx-auto bg-base-200">
			<div class="relative  px-4 grid grid-cols-3 items-center gap-4">
				if opts.backBtn {
					<a href="/courses" title="Courses" class="btn btn-ghost btn-square justify-self-end"><i class="fa-solid fa-arrow-left"></i></a>
				}
				<h1 class="text-2xl col-start-2 justify-self-center">{ title }</h1>
				if opts.createBtn {
					<a href="/courses/create" title="Create a course" class="btn btn-success btn-circle col-start-3 justify-self-end"><i class="fa-solid fa-plus"></i></a>
				}
			</div>
			<div class="flex flex-col items-center" id="courses">
				<div class="py-10 sm:py-16 mx-auto px-4 sm:px-6 lg:px-8 bg-base-200">
					{ children... }
				</div>
			</div>
		</section>
	}
}

templ CoursesList(courses []domain.Course) {
	@CourseLayout("Courses", layoutOpts{createBtn: true}) {
		if len(courses) > 0 {
			<div class="gap-2 flex flex-wrap items-center justify-center">
				for _, course := range courses {
					<div class="card bg-neutral text-neutral-content w-96">
						<div class="card-body">
							<h2 class="card-title">{ course.Title.String }</h2>
							<h3>Course date: { course.Date.Time.Format("1 Jan 2006 at 15h4") } </h3>
							<p>{ course.Description.String } </p>
							<div class="card-actions justify-between">
								if course.Completed {
									<button disabled class="btn btn-disabled" title="Completed course">Completed</button>
								} else if course.Canceled {
									<button disabled class="btn btn-disabled" title="Course Canceled">Canceled</button>
								} else {
									<div>
										<button class="btn btn-neutral">EDIT</button>
										<button class="btn btn-error">CANCEL</button>
									</div>
									<a href={ templ.URL("/courses/" + string(course.ID.Bytes[:])) } class="btn btn-accent" title="Join">Join</a>
								}
							</div>
						</div>
					</div>
				}
			</div>
		} else {
			<div class="flex flex-col gap-4 w-full max-w-xl">
				<p>You don't have any courses yet</p>
				<div>
					<a href="/courses/join" hx-swap="innerHTML" hx-target="#courses" class="btn btn-accent" title="Join a course">Join a course</a>
					<a href="/courses/create" class="btn btn-success" title="Create a course">Create a course</a>
				</div>
			</div>
		}
	}
}

type CourseFormErrors struct {
	Title       string
	Description string
	Student     string
	Date        string
	Create      string
}

type CourseForm struct {
	Title        string
	Description  string
	StudentEmail string
	Date         string
	Success      string
}

templ CreateCoursePage(course CourseForm, errors CourseFormErrors) {
	@CourseLayout("Create Course", layoutOpts{backBtn: true}) {
		@CreateCourse(course, errors)
	}
}

templ CreateCourse(course CourseForm, errors CourseFormErrors) {
	<form
		hx-post="/courses/create"
		hx-swap="outerHTML scroll:top"
		class="flex flex-col gap-2"
	>
		<label class="form-control w-full">
			<div class="label">
				<span class="label-text">Email</span>
			</div>
			<input type="text" name="title" value={ course.Title } required placeholder="Mathematics 101" class="input input-bordered w-full"/>
			if len(errors.Title) > 0 {
				<div class="label">
					<span class="label-text-alt text-error">{ errors.Title }</span>
				</div>
			}
		</label>
		<label class="form-control w-full">
			<div class="label">
				<span class="label-text">Description</span>
			</div>
			<textarea name="description" value={ course.Description } required placeholder="Description of the course" class="textarea textarea-bordered textarea-lg w-full max-w-xs"></textarea>
			if len(errors.Description) > 0 {
				<div class="label">
					<span class="label-text-alt text-error">{ errors.Description }</span>
				</div>
			}
		</label>
		<label class="form-control w-full">
			<div class="label">
				<span class="label-text">Student Email</span>
			</div>
			<input type="email" name="student-email" value={ course.StudentEmail } required placeholder="Student Email" class="input input-bordered w-full"/>
			if len(errors.Student) > 0 {
				<div class="label">
					<span class="label-text-alt text-error">{ errors.Student }</span>
				</div>
			}
		</label>
		<label class="form-control w-full">
			<div class="label">
				<span class="label-text">Date</span>
			</div>
			<input type="date" name="date" value={ course.Date } required placeholder="Mathematics 101" min={ time.Now().Format("2006-01-02") } class="input input-bordered w-full"/>
			if len(errors.Date) > 0 {
				<div class="label">
					<span class="label-text-alt text-error">{ errors.Date }</span>
				</div>
			}
		</label>
		<button type="submit" class="w-full btn btn-primary mt-8">Create</button>
		if len(errors.Create) > 0 {
			<div class="label">
				<span class="label-text-alt text-error">{ errors.Create }</span>
			</div>
		}
		if len(course.Success) > 0 {
			<div class="label">
				<span class="label-text-alt text-success">{ course.Success }</span>
			</div>
		}
	</form>
}

templ JoinCourse(course domain.Course) {
	@CourseLayout("Join Course", layoutOpts{backBtn: true, createBtn: true}) {
		<h1 class="text-2xl">{ course.Title.String }</h1>
		<div>
			<p>{ string(course.ID.Bytes[:]) }</p>
			<p>{ course.Description.String }</p>
			<p>{ course.Date.Time.Format("1 Jan 2006 at 15h4") }</p>
		</div>
	}
}
