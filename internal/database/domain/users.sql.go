// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package domain

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  email, password_hash, provider, provider_id
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, created_at, password_hash, activated, version, email, provider, provider_id, role
`

type CreateUserParams struct {
	Email        string
	PasswordHash []byte
	Provider     string
	ProviderID   pgtype.Text
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Email,
		arg.PasswordHash,
		arg.Provider,
		arg.ProviderID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.PasswordHash,
		&i.Activated,
		&i.Version,
		&i.Email,
		&i.Provider,
		&i.ProviderID,
		&i.Role,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
select id, created_at, password_hash, activated, version, email, provider, provider_id, role from users
where email = $1 limit 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.PasswordHash,
		&i.Activated,
		&i.Version,
		&i.Email,
		&i.Provider,
		&i.ProviderID,
		&i.Role,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
select id, created_at, password_hash, activated, version, email, provider, provider_id, role from users
where id = $1 limit 1
`

func (q *Queries) GetUserById(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.PasswordHash,
		&i.Activated,
		&i.Version,
		&i.Email,
		&i.Provider,
		&i.ProviderID,
		&i.Role,
	)
	return i, err
}
