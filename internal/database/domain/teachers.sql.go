// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: teachers.sql

package domain

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTeacher = `-- name: CreateTeacher :one
INSERT INTO teachers (
  user_id, description, picture
) VALUES (
  $1, $2, $3
)
RETURNING id, user_id, description, picture
`

type CreateTeacherParams struct {
	UserID      pgtype.UUID
	Description pgtype.Text
	Picture     pgtype.Text
}

func (q *Queries) CreateTeacher(ctx context.Context, arg CreateTeacherParams) (Teacher, error) {
	row := q.db.QueryRow(ctx, createTeacher, arg.UserID, arg.Description, arg.Picture)
	var i Teacher
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Description,
		&i.Picture,
	)
	return i, err
}

const deleteTeacher = `-- name: DeleteTeacher :exec
DELETE FROM teachers
WHERE id = $1
`

func (q *Queries) DeleteTeacher(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteTeacher, id)
	return err
}

const getTeacherById = `-- name: GetTeacherById :one
select id, user_id, description, picture from teachers
where id = $1 limit 1
`

func (q *Queries) GetTeacherById(ctx context.Context, id pgtype.UUID) (Teacher, error) {
	row := q.db.QueryRow(ctx, getTeacherById, id)
	var i Teacher
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Description,
		&i.Picture,
	)
	return i, err
}

const getTeacherByUserId = `-- name: GetTeacherByUserId :one
select id, user_id, description, picture from teachers
where user_id = $1 limit 1
`

func (q *Queries) GetTeacherByUserId(ctx context.Context, userID pgtype.UUID) (Teacher, error) {
	row := q.db.QueryRow(ctx, getTeacherByUserId, userID)
	var i Teacher
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Description,
		&i.Picture,
	)
	return i, err
}
