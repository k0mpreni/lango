// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: students.sql

package domain

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createStudent = `-- name: CreateStudent :one
INSERT INTO students (
  user_id
) VALUES (
  $1
)
RETURNING id, user_id
`

func (q *Queries) CreateStudent(ctx context.Context, userID pgtype.UUID) (Student, error) {
	row := q.db.QueryRow(ctx, createStudent, userID)
	var i Student
	err := row.Scan(&i.ID, &i.UserID)
	return i, err
}

const deleteStudent = `-- name: DeleteStudent :exec
DELETE FROM students
WHERE id = $1
`

func (q *Queries) DeleteStudent(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteStudent, id)
	return err
}

const getStudent = `-- name: GetStudent :one
SELECT id, user_id FROM students
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetStudent(ctx context.Context, id pgtype.UUID) (Student, error) {
	row := q.db.QueryRow(ctx, getStudent, id)
	var i Student
	err := row.Scan(&i.ID, &i.UserID)
	return i, err
}

const listStudents = `-- name: ListStudents :many
SELECT id, user_id FROM students
WHERE id = $1 LIMIT 1
`

func (q *Queries) ListStudents(ctx context.Context, id pgtype.UUID) ([]Student, error) {
	rows, err := q.db.Query(ctx, listStudents, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Student
	for rows.Next() {
		var i Student
		if err := rows.Scan(&i.ID, &i.UserID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
