// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: courses.sql

package domain

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCourse = `-- name: CreateCourse :one
INSERT INTO courses (
  title, teacher_id, student_id, description, date
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, created_at, teacher_id, student_id, title, description, date, completed, canceled
`

type CreateCourseParams struct {
	Title       pgtype.Text
	TeacherID   pgtype.UUID
	StudentID   pgtype.UUID
	Description pgtype.Text
	Date        pgtype.Timestamptz
}

func (q *Queries) CreateCourse(ctx context.Context, arg CreateCourseParams) (Course, error) {
	row := q.db.QueryRow(ctx, createCourse,
		arg.Title,
		arg.TeacherID,
		arg.StudentID,
		arg.Description,
		arg.Date,
	)
	var i Course
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.TeacherID,
		&i.StudentID,
		&i.Title,
		&i.Description,
		&i.Date,
		&i.Completed,
		&i.Canceled,
	)
	return i, err
}

const deleteCourse = `-- name: DeleteCourse :exec
DELETE FROM courses
WHERE id = $1
`

func (q *Queries) DeleteCourse(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteCourse, id)
	return err
}

const getCourse = `-- name: GetCourse :one
select id, created_at, teacher_id, student_id, title, description, date, completed, canceled from courses
where id = $1 limit 1
`

func (q *Queries) GetCourse(ctx context.Context, id pgtype.UUID) (Course, error) {
	row := q.db.QueryRow(ctx, getCourse, id)
	var i Course
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.TeacherID,
		&i.StudentID,
		&i.Title,
		&i.Description,
		&i.Date,
		&i.Completed,
		&i.Canceled,
	)
	return i, err
}

const listCoursesByTeacherId = `-- name: ListCoursesByTeacherId :many
select id, created_at, teacher_id, student_id, title, description, date, completed, canceled from courses
where teacher_id = $1
`

func (q *Queries) ListCoursesByTeacherId(ctx context.Context, teacherID pgtype.UUID) ([]Course, error) {
	rows, err := q.db.Query(ctx, listCoursesByTeacherId, teacherID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Course
	for rows.Next() {
		var i Course
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.TeacherID,
			&i.StudentID,
			&i.Title,
			&i.Description,
			&i.Date,
			&i.Completed,
			&i.Canceled,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
